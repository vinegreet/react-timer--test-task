{"version":3,"sources":["components/Timer/index.jsx","components/App/index.jsx","serviceWorker.js","index.js"],"names":["Timer","twoDigits","num","formatTime","s","hours","Math","floor","minutes","seconds","toFixed","n","_this","concat","_this$props","this","props","isActive","onSplitClick","onTimerClick","splitsArray","timer","title","format","splitElements","map","item","idx","react_default","a","createElement","className","onClick","key","data-idx","Component","console","log","Date","toLocaleTimeString","App","state","date","interval","start","timerDateStart","now","timerInterval","setInterval","setState","prev","timerDate","parseFloat","Object","objectSpread","stop","clearInterval","handleTimerClick","splitDate","splitInterval","length","toConsumableArray","split","handleSplitClick","e","parseInt","target","dataset","output","slice","_this$state","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b77932fa.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Timer extends Component {\n\n  twoDigits = num => (num > 9.99)? num : '0' + num;\n\n  formatTime = s => {\n    const hours = Math.floor(s % (3600 * 24) / 3600);\n    const minutes = Math.floor(s % 3600 / 60);\n    const seconds = (s % 60).toFixed(1);\n    const n = this.twoDigits;\n    return `${n(hours)}:${n(minutes)}:${n(seconds)}`;\n  }\n\n  render() {\n    const { isActive, onSplitClick, onTimerClick, splitsArray, timer, title } = this.props;\n    const format = this.formatTime;\n    const splitElements = (!splitsArray)? null : splitsArray.map((item, idx) => (\n      <li className=\"split\" onClick={onSplitClick} key={idx} data-idx={idx}>\n        {format(item.timer)}\n      </li>\n    ));\n\n    return (\n      <div className=\"Timer\">\n        <h2 className=\"title\">{title} used here</h2>\n        <div className={`timer${isActive? ' timer--active' : ''}`} onClick={onTimerClick}>\n          <div className=\"timer__face timer__face--front\">{format(timer)}</div>\n          <div className=\"timer__face timer__face--back\"></div>\n          <div className=\"timer__face timer__face--right\"></div>\n          <div className=\"timer__face timer__face--left\"></div>\n          <div className=\"timer__face timer__face--top\"></div>\n          <div className=\"timer__face timer__face--bottom\"></div>\n        </div>\n        <ul>\n          {splitElements}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from 'react';\nimport Timer from '../Timer';\n\nconsole.log(new Date().toLocaleTimeString());\n\nclass App extends Component {\n  state = {\n    isActive: false,\n    date: {\n      splitsArray: [],\n      timer: 0\n    },\n    interval: {\n      splitsArray: [],\n      timer: 0\n    }\n  }\n\n  start = () => {\n    const timerDateStart = Date.now() - this.state.date.timer * 1000;\n    this.timerInterval = setInterval(() => {\n      this.setState(prev => {\n        const timerDate = ((Date.now() - timerDateStart) / 1000).toFixed(1);\n        const timerInterval = (parseFloat(prev.interval.timer) + 0.1).toFixed(1);\n        return {\n          isActive: true,\n          date: {\n            ...prev.date,\n            timer: timerDate\n          },\n          interval: {\n            ...prev.interval,\n            timer: timerInterval\n          }\n        };\n      });\n    }, 100);\n  }\n\n  stop = () => {\n    clearInterval(this.timerInterval);\n    this.setState({ isActive: false });\n  }\n\n  handleTimerClick = () => {\n    const { isActive } = this.state;\n    if (!isActive) {\n      this.start();\n      return;\n    }\n    this.setState(prev => {\n      const { date, interval } = prev;\n      let splitDate, splitInterval;\n      splitDate = (!date.splitsArray.length)\n        ? date.timer\n        : date.timer - date.splitsArray[date.splitsArray.length - 1].timer;\n      splitInterval = (!interval.splitsArray.length)\n        ? interval.timer\n        : interval.timer - interval.splitsArray[interval.splitsArray.length - 1].timer;\n      return {\n        date: {\n          ...date,\n          splitsArray: [...date.splitsArray, { timer: date.timer, split: splitDate }]\n        },\n        interval: {\n          ...interval,\n          splitsArray: [...interval.splitsArray, { timer: interval.timer, split: splitInterval }]\n        }\n      };\n    });\n  }\n\n  handleSplitClick = e => {\n    const idx = parseInt(e.target.dataset.idx);\n    this.stop();\n    this.setState(prev => ({\n      date: {\n        output: prev.date.splitsArray[idx].output,\n        timer: prev.date.splitsArray[idx].timer,\n        splitsArray: prev.date.splitsArray.slice(0, idx + 1)\n      },\n      interval: {\n        output: prev.interval.splitsArray[idx].output,\n        timer: prev.interval.splitsArray[idx].timer,\n        splitsArray: prev.interval.splitsArray.slice(0, idx + 1)\n      }\n    }));\n  }\n\n  render() {\n    const { date, interval, isActive } = this.state;\n    return (\n      <div className=\"App\">\n        <Timer title=\"Date.now()\"\n          isActive={isActive}\n          timer={date.timer}\n          splitsArray={date.splitsArray}\n          onTimerClick={this.handleTimerClick}\n          onSplitClick={this.handleSplitClick} />\n        <Timer title=\"setInterval and incrementation\"\n          isActive={isActive}\n          timer={interval.timer}\n          splitsArray={interval.splitsArray}\n          onTimerClick={this.handleTimerClick}\n          onSplitClick={this.handleSplitClick} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}